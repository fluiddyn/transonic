[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "transonic"
version = "0.6.0"
description = "Make your Python code fly at transonic speeds!"
authors = [
    { name = "Pierre Augier", email = "pierre.augier@univ-grenoble-alpes.fr" },
]
dependencies = ["autopep8", "beniget ~=0.4.0", "gast ~=0.5.0", "numpy"]
requires-python = ">= 3.9"
readme = "README.md"
license = { text = "BSD License" }
keywords = ["pythran"]
classifiers = [
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Source = "https://foss.heptapod.net/fluiddyn/transonic"
Documentation = "https://transonic.readthedocs.io"
"Git Mirror" = "https://github.com/fluiddyn/transonic"

[project.optional-dependencies]
mpi = ["mpi4py"]

[project.scripts]
transonic = "transonic.run:run"

[tool.pdm]
package-dir = "src"

[tool.pdm.dev-dependencies]

base_test = [
    "black",
    "coverage[toml]",
    "mpi4py",
    "nbval ~=0.9.6",
    "numpy",
    "pytest",
    "pytest-cov",
    "pytest-virtualenv",
    # setuptools still needed for pytest-virtualenv
    "setuptools",
    "scipy",
    "-e transonic_testing @ file:///${PROJECT_ROOT}/_transonic_testing",
]
test = ["cython", "mpi4py", "pythran", "numba"]
doc = [
    "jupyterlab",
    # "nbsphinx",
    "myst-nb",
    "numpydoc",
    "recommonmark",
    "sphinx-autobuild",
    "sphinx<7",
    "sphinx_rtd_theme",
    # setuptools for transonic.dist
    "setuptools",
    "sphinx-copybutton",
]
dev = ["pip", "build", "pylint", "twine"]


[tool.pytest]
addopts = "--doctest-modules"

# [tool.pytest.ini_options]
# addopts = "--cov --cov-config=pyproject.toml --no-cov-on-fail"

[tool.black]
line-length = 82
target-version = ['py38']


[tool.coverage.run]
branch = true

source = ["src/transonic", "src/transonic_cl", "./tests"]
data_file = ".coverage/coverage"
omit = [
    "*/try_*.py",
    "*/_old_*.py",
    "transonic/__pythran__/for_test_init.py",
    "transonic/__cython__/for_test_init.py",
    "transonic/__numba__/for_test_init.py",
]
parallel = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
show_missing = true
ignore_errors = true

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.xml]
output = ".coverage/coverage.xml"
